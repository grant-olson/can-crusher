#!/usr/bin/env python3

from PIL import Image, ImageFont, ImageDraw
from glob import glob
import random
import os

screen_height = 240
screen_width = 320

yellow = (0xFE, 0xCB, 0x0)
white = (250,250,250)
green = (0x22,0x8b,0x22)
height = 24

bold_font = ImageFont.truetype("LiberationSans-Bold.ttf", height)
bold_italic_font = ImageFont.truetype("LiberationSans-BoldItalic.ttf", height)
big_bold_font = ImageFont.truetype("LiberationSans-Bold.ttf", height*2)

random_numbers = list(range(0,2000))
random.shuffle(random_numbers)

facts = [
    "That British people PRONOUNCE aluminum differently because they SPELL it differently?",
    "Napolean Bonaparte treasured his rare aluminum-ware, and he forced his guests to eat with lowly gold-ware?",
    "When alien archeologists discover a dead Earth, that pure Aluminum will be the primary marker of the Anthropocene Era?",
    "Before Development of the BESSEMER PROCESS pure Aluminum was extremely rare?",
    "Aluminum has an Atomic Number of 13?",
    "Aluminum based antiperspirant works by clogging your sweat pores and may give you ALZHEIMERS?"
    ]


ads = [
    "Hershell Walker is WRONG for GEORGIA and the SENATE.",
    "Reverend Warnock's EXTREME SOCIALISM and DANGEROUS AGENDA are TOO MUCH for GEORGIA"
]

trivia = [
  ("What is fun to recycle and rhymes with beryllium?", "Aluminum!"),
  ("What metal caps the Washington Monument?", "Aluminum!"),
  
  ]

def get_random_number():
  return random_numbers.pop()

def output_filename(group, file_format, sequence_number, base_name, ext):
  if sequence_number is None:
    return ("output/%s/%s/%s.%s" % (group, file_format, base_name, ext))
  else:
    return ("output/%s/%s/%04d_%s.%s" % (group, file_format, sequence_number, base_name, ext))

def draw_button(draw):
  draw.rectangle( [(0+40,240-36), (320-40,240-12)], fill=green, outline=white)
  draw.text((45, 240-38), "INITIATE CRUSHING", white, font=bold_font)

def save_raw_fb(image, filename):
  """
  Save raw in a format that can be copied directly to /dev/fb0
  """
  data = b''

  for j in range(0,screen_height):
    for i in range(0,screen_width):
      pixel = image.getpixel( (i,j) )
      r = pixel[0]
      g = pixel[1]
      b = pixel[2]
      data += b"%c%c%c%c" % (b,g,r,255)

  f = open(filename, "wb")
  f.write(data)
  f.close()
  
def save_raw_565(image, filename):
  data = b''

  for i in range(0,screen_width):
    for j in range(0,screen_height):
      pixel = image.getpixel( (i,j) )
      r = pixel[0]
      g = pixel[1]
      b = pixel[2]

      r = (r >> 3) << 3 # make 5 bits, packed to left
      b = (b >> 3) # five bits, packed to right.
      g = (g >> 2) # 6 bits
      g1 = g >> 3 # top 3
      g2 = (g & 0x7) << 5 # bottom 3 bits shifted to left.

      byte1 = r + g1
      byte2 = g2 + b
      
      data += b"%c%c" % (byte1, byte2)

  f = open(filename, "wb")
  f.write(data)
  f.close()


def add_text(image, text, font, color, position):
  current_x, current_y = position
  space_size, space_height = image.textsize(" ", font=font)
  
  words = text.split(" ")
  for word in words:
    next_word_length, next_word_height = image.textsize(word, font=font)
    if (current_x + next_word_length) >= 320:
      print("OVERFLOW AT %s" % word)
      current_y += space_height
      current_x = 0
    image.text((current_x, current_y), word, color, font=font)
    current_x += next_word_length
    current_x += space_size

  if current_x != 0:
    current_y += height
    current_x = 0
    
  return (current_x, current_y)

def save_variants(group, image, filename, random_id=None):
          
  image.save(output_filename(group, "png",random_id, filename, "png"))
  #save_raw_fb(image,output_filename(group, "raw_fb", random_id, filename, "raw"))
  save_raw_565(image,output_filename(group, "raw_565", random_id, filename, "565"))

def make_fact_slide(background_image, title_text, main_text):

  image = Image.open(background_image)

  position = (0,0)
  modified_image = ImageDraw.Draw(image)

  position = add_text(modified_image, title_text, bold_italic_font, yellow, position)
  add_text(modified_image, main_text, bold_font, white, position) 
  
  draw_button(modified_image)

  random_id = get_random_number()

  save_variants("slides", image, "facts", random_id)
  
def make_attack_slide(attack_text):

  image = Image.new("RGB", (320,240), color=(0xFF,0xA5, 0))

  position = (0,0)
  modified_image = ImageDraw.Draw(image)

  add_text(modified_image, attack_text, bold_font, white, position) 
  
  draw_button(modified_image)

  random_id = get_random_number()

  save_variants("slides", image, "attack_ads", random_id)
  
def make_trivia_slide(background_image, trivia):
  image = Image.open(background_image)

  position = (0,0)
  modified_image = ImageDraw.Draw(image)

  position = add_text(modified_image, "Trivia!", bold_italic_font, yellow, position)
  position = add_text(modified_image, "Q: " + trivia[0], bold_font, white, position) 
  
  draw_button(modified_image)

  random_id = get_random_number()

  save_variants("slides", image, "1_trivia", random_id)

  position = add_text(modified_image, "A: " + trivia[1], bold_font, yellow, position) 

  save_variants("slides", image, "2_trivia", random_id)

def make_admin_slide(cmd, msg):
  image = Image.new("RGB", (320,240), color=(0, 0, 0))
  position = (0,24)
  modified_image = ImageDraw.Draw(image)

  position = add_text(modified_image, msg, big_bold_font, white, position)

  save_variants("admin", image, cmd)
  
fact_backgrounds = glob("./backgrounds/*")

for dir in ["slides", "admin"]:
  for subdir in ["png", "raw_fb", "raw_565"]:
    full_dir = "output/%s/%s" % (dir, subdir)
    if not os.path.exists(full_dir):
      os.makedirs(full_dir)

def make_slides():
  for i, text in enumerate(facts):
    make_fact_slide(fact_backgrounds[i%len(fact_backgrounds)], "DID YOU KNOW...", facts[i])

  for i, trivia in enumerate(trivia):
    make_trivia_slide(fact_backgrounds[i%len(fact_backgrounds)], trivia)

  for i, attack in enumerate(ads):
    make_attack_slide(attack)

admin_screens = { "HOME": "Homing...",
                  "INIT": "Initializing...",
                  "FIND_CAN": "Locating Can...",
                  "CRUSH_CAN": "Crushing Can...",
                  "RELEASE_CAN": "Done. Releasing Can...",
                  "UNKNOWN": "Working..."
                  }

def make_admin():
  for cmd, msg in admin_screens.items():
    make_admin_slide(cmd, msg)

if __name__ == "__main__":
  make_admin()
