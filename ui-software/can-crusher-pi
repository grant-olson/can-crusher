#!/usr/bin/env python3

import os
from time import time, sleep

from can_crusher import can_crusher, spi_display, touch_screen, display_helper
from can_crusher.config import Config

from can_crusher.serial_cli import SerialException

class CliUI:
  def __init__(self):
    print("Pi Zero Touch Screen Interface")

    self.config = Config()
    self.config.load()

    self.display = spi_display.SpiDisplay()
    self.display.test_pattern()

    if "calibration" in self.config:
      self.calibration = self.config["calibration"]
    else:
      self.calibration = touch_screen.TouchScreenCalibrator().calibrate()
      self.config["calibration"] = self.calibration
      self.config.save()
      print(repr(self.calibration))

    if "motors" in self.config:
      if "stallguard_threshold" in self.config["motors"]:
        self.stallguard_threshold = self.config["motors"]["stallguard_threshold"]
      else:
        self.stallguard_threshold = None
      
    self.ts = touch_screen.TouchScreen(calibration=self.calibration)

    self.display_helper = display_helper.DisplayHelper()
    self.slides = self.display_helper.slide_iterator()

  def display_fatal_error(self):
    file_name = self.display_helper.get_admin_screen_file_name("ERROR")
    self.display.xfer_raw_565_file(file_name)
    
  def notify(self, *args):
    message = args[0]

    print("GOT %s" % message)

    file_name = self.display_helper.get_admin_screen_file_name(message)
    self.display.xfer_raw_565_file(file_name)
    
  def request(self):
    start_time = 0
    while True:
      current_time = time()
      delta = current_time - start_time
      if delta > 10:
        start_time = current_time
        next_slide = next(self.slides)
        self.display.xfer_raw_565_file(next_slide)
      click = self.ts.get_button_click_scaled()
      if click is not None:
        print("GOT CLICK %s" % repr(click))
        x, y = click
        x_distance = 0
        if x < 40:
          x_distance = 40 - x
        elif x > 280:
          x_distance = x - 280

        y_distance = 0
        if y < (240-36):
          y_distance = (240-36) - y_distance
        elif y > (240-12):
          y_distance = y - (240-12)

        if x_distance <= 5 and y_distance <= 5:
          print("HIT (%d %d) %d %d" % (x, y, x_distance, y_distance) )
          return "ACT"
        else:
          print("MISS (%d %d) %d %d" % (x, y, x_distance, y_distance) )
      sleep(0.05) # 20 x a second should be good        
    
if __name__ == "__main__":
  print("STARTING can-crusher-pi") # get something in journalctl log when a service
  try:
    ui = CliUI()
    cc = can_crusher.CanCrusher("/dev/serial0", ui)
    if ui.stallguard_threshold is not None:
      cc.stallguard_threshold = ui.stallguard_threshold
    cc.run()
  except:
    ui.display_fatal_error()
    raise
